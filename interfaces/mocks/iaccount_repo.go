// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/dwiangraenihantik/go/src/github.com/dwiangraeni/dealls/interfaces/iaccount_repo.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	model "github.com/dwiangraeni/dealls/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIAccountRepo is a mock of IAccountRepo interface.
type MockIAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountRepoMockRecorder
}

// MockIAccountRepoMockRecorder is the mock recorder for MockIAccountRepo.
type MockIAccountRepoMockRecorder struct {
	mock *MockIAccountRepo
}

// NewMockIAccountRepo creates a new mock instance.
func NewMockIAccountRepo(ctrl *gomock.Controller) *MockIAccountRepo {
	mock := &MockIAccountRepo{ctrl: ctrl}
	mock.recorder = &MockIAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountRepo) EXPECT() *MockIAccountRepoMockRecorder {
	return m.recorder
}

// FindOneAccountByAccountMaskID mocks base method.
func (m *MockIAccountRepo) FindOneAccountByAccountMaskID(ctx context.Context, accountMaskID string) (model.AccountBaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneAccountByAccountMaskID", ctx, accountMaskID)
	ret0, _ := ret[0].(model.AccountBaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneAccountByAccountMaskID indicates an expected call of FindOneAccountByAccountMaskID.
func (mr *MockIAccountRepoMockRecorder) FindOneAccountByAccountMaskID(ctx, accountMaskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAccountByAccountMaskID", reflect.TypeOf((*MockIAccountRepo)(nil).FindOneAccountByAccountMaskID), ctx, accountMaskID)
}

// FindOneAccountByAccountUserName mocks base method.
func (m *MockIAccountRepo) FindOneAccountByAccountUserName(ctx context.Context, userName string) (model.AccountBaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneAccountByAccountUserName", ctx, userName)
	ret0, _ := ret[0].(model.AccountBaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneAccountByAccountUserName indicates an expected call of FindOneAccountByAccountUserName.
func (mr *MockIAccountRepoMockRecorder) FindOneAccountByAccountUserName(ctx, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAccountByAccountUserName", reflect.TypeOf((*MockIAccountRepo)(nil).FindOneAccountByAccountUserName), ctx, userName)
}

// GetListAccountNewMatchPagination mocks base method.
func (m *MockIAccountRepo) GetListAccountNewMatchPagination(ctx context.Context, req model.PaginationRequest) ([]model.AccountBaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListAccountNewMatchPagination", ctx, req)
	ret0, _ := ret[0].([]model.AccountBaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListAccountNewMatchPagination indicates an expected call of GetListAccountNewMatchPagination.
func (mr *MockIAccountRepoMockRecorder) GetListAccountNewMatchPagination(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListAccountNewMatchPagination", reflect.TypeOf((*MockIAccountRepo)(nil).GetListAccountNewMatchPagination), ctx, req)
}

// InsertAccount mocks base method.
func (m *MockIAccountRepo) InsertAccount(ctx context.Context, account model.AccountBaseModel) (model.AccountBaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccount", ctx, account)
	ret0, _ := ret[0].(model.AccountBaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAccount indicates an expected call of InsertAccount.
func (mr *MockIAccountRepoMockRecorder) InsertAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccount", reflect.TypeOf((*MockIAccountRepo)(nil).InsertAccount), ctx, account)
}

// UpdateAccountType mocks base method.
func (m *MockIAccountRepo) UpdateAccountType(ctx context.Context, trx *sql.Tx, account model.AccountBaseModel) (model.AccountBaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountType", ctx, trx, account)
	ret0, _ := ret[0].(model.AccountBaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountType indicates an expected call of UpdateAccountType.
func (mr *MockIAccountRepoMockRecorder) UpdateAccountType(ctx, trx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountType", reflect.TypeOf((*MockIAccountRepo)(nil).UpdateAccountType), ctx, trx, account)
}
