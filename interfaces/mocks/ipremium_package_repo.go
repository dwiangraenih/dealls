// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/dwiangraenihantik/go/src/github.com/dwiangraeni/dealls/interfaces/ipremium_package_repo.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	model "github.com/dwiangraeni/dealls/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIPremiumPackageRepo is a mock of IPremiumPackageRepo interface.
type MockIPremiumPackageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIPremiumPackageRepoMockRecorder
}

// MockIPremiumPackageRepoMockRecorder is the mock recorder for MockIPremiumPackageRepo.
type MockIPremiumPackageRepoMockRecorder struct {
	mock *MockIPremiumPackageRepo
}

// NewMockIPremiumPackageRepo creates a new mock instance.
func NewMockIPremiumPackageRepo(ctrl *gomock.Controller) *MockIPremiumPackageRepo {
	mock := &MockIPremiumPackageRepo{ctrl: ctrl}
	mock.recorder = &MockIPremiumPackageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPremiumPackageRepo) EXPECT() *MockIPremiumPackageRepoMockRecorder {
	return m.recorder
}

// GetListPremiumPackagePagination mocks base method.
func (m *MockIPremiumPackageRepo) GetListPremiumPackagePagination(ctx context.Context, req model.PaginationRequest) ([]model.PremiumPackageBaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListPremiumPackagePagination", ctx, req)
	ret0, _ := ret[0].([]model.PremiumPackageBaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListPremiumPackagePagination indicates an expected call of GetListPremiumPackagePagination.
func (mr *MockIPremiumPackageRepoMockRecorder) GetListPremiumPackagePagination(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListPremiumPackagePagination", reflect.TypeOf((*MockIPremiumPackageRepo)(nil).GetListPremiumPackagePagination), ctx, req)
}

// GetPremiumPackageByPackageUID mocks base method.
func (m *MockIPremiumPackageRepo) GetPremiumPackageByPackageUID(ctx context.Context, packageUID string) (model.PremiumPackageBaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPremiumPackageByPackageUID", ctx, packageUID)
	ret0, _ := ret[0].(model.PremiumPackageBaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPremiumPackageByPackageUID indicates an expected call of GetPremiumPackageByPackageUID.
func (mr *MockIPremiumPackageRepoMockRecorder) GetPremiumPackageByPackageUID(ctx, packageUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPremiumPackageByPackageUID", reflect.TypeOf((*MockIPremiumPackageRepo)(nil).GetPremiumPackageByPackageUID), ctx, packageUID)
}

// GetPremiumPackageUserByAccountMaskID mocks base method.
func (m *MockIPremiumPackageRepo) GetPremiumPackageUserByAccountMaskID(ctx context.Context, accountMaskID string) ([]model.PremiumPackageUserBaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPremiumPackageUserByAccountMaskID", ctx, accountMaskID)
	ret0, _ := ret[0].([]model.PremiumPackageUserBaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPremiumPackageUserByAccountMaskID indicates an expected call of GetPremiumPackageUserByAccountMaskID.
func (mr *MockIPremiumPackageRepoMockRecorder) GetPremiumPackageUserByAccountMaskID(ctx, accountMaskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPremiumPackageUserByAccountMaskID", reflect.TypeOf((*MockIPremiumPackageRepo)(nil).GetPremiumPackageUserByAccountMaskID), ctx, accountMaskID)
}

// GetPremiumPackageUserByTitleAndAccountID mocks base method.
func (m *MockIPremiumPackageRepo) GetPremiumPackageUserByTitleAndAccountID(ctx context.Context, title string, accountID int64) (model.PremiumPackageUserBaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPremiumPackageUserByTitleAndAccountID", ctx, title, accountID)
	ret0, _ := ret[0].(model.PremiumPackageUserBaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPremiumPackageUserByTitleAndAccountID indicates an expected call of GetPremiumPackageUserByTitleAndAccountID.
func (mr *MockIPremiumPackageRepoMockRecorder) GetPremiumPackageUserByTitleAndAccountID(ctx, title, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPremiumPackageUserByTitleAndAccountID", reflect.TypeOf((*MockIPremiumPackageRepo)(nil).GetPremiumPackageUserByTitleAndAccountID), ctx, title, accountID)
}

// InsertPremiumPackageUser mocks base method.
func (m *MockIPremiumPackageRepo) InsertPremiumPackageUser(ctx context.Context, trx *sql.Tx, req *model.PremiumPackageUserBaseModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPremiumPackageUser", ctx, trx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPremiumPackageUser indicates an expected call of InsertPremiumPackageUser.
func (mr *MockIPremiumPackageRepoMockRecorder) InsertPremiumPackageUser(ctx, trx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPremiumPackageUser", reflect.TypeOf((*MockIPremiumPackageRepo)(nil).InsertPremiumPackageUser), ctx, trx, req)
}
